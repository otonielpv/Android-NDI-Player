<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# NDI Player - Instrucciones para completar la integración&#10;&#10;## Librerías NDI necesarias&#10;&#10;Para completar la integración del SDK NDI, necesitas descargar las librerías nativas del SDK oficial de NewTek/Vizrt:&#10;&#10;1. Descarga el NDI SDK desde: https://ndi.video/download-ndi-sdk/&#10;2. Extrae las librerías para Android de las siguientes arquitecturas:&#10;   - arm64-v8a/libndi.so&#10;   - armeabi-v7a/libndi.so&#10;   - x86/libndi.so&#10;   - x86_64/libndi.so&#10;&#10;3. Copia estas librerías en los siguientes directorios:&#10;   ```&#10;   app/src/main/jniLibs/arm64-v8a/libndi.so&#10;   app/src/main/jniLibs/armeabi-v7a/libndi.so&#10;   app/src/main/jniLibs/x86/libndi.so&#10;   app/src/main/jniLibs/x86_64/libndi.so&#10;   ```&#10;&#10;## Compilación&#10;&#10;Una vez que tengas las librerías NDI:&#10;&#10;1. Abre el proyecto en Android Studio&#10;2. Sincroniza el proyecto (Sync Project with Gradle Files)&#10;3. Compila el proyecto (Build &gt; Make Project)&#10;4. Ejecuta en tu dispositivo Android TV&#10;&#10;## Características implementadas&#10;&#10;✅ SDK NDI nativo integrado&#10;✅ Descubrimiento automático de fuentes NDI&#10;✅ Interfaz optimizada para Android TV&#10;✅ Reproductor con controles de TV&#10;✅ Manejo de errores y reconexión&#10;✅ Soporte para múltiples arquitecturas&#10;&#10;## Uso&#10;&#10;1. La aplicación busca automáticamente fuentes NDI en la red&#10;2. Muestra las fuentes disponibles en tarjetas&#10;3. Selecciona una fuente para reproducir&#10;4. Controla la reproducción con el control remoto&#10;&#10;## Notas importantes&#10;&#10;- Asegúrate de que tu Android TV esté en la misma red que las fuentes NDI&#10;- La aplicación requiere permisos de red y multicast&#10;- El rendimiento depende de la calidad de la red WiFi" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;android {&#10;    namespace = &quot;ndiplayer.oto&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;ndiplayer.oto&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;android {&#10;    namespace = &quot;ndiplayer.oto&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;ndiplayer.oto&quot;&#10;        minSdk = 21&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        &#10;        ndk {&#10;            abiFilters += listOf(&quot;arm64-v8a&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;x86_64&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;    &#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.22.1&quot;&#10;        }&#10;    }&#10;    &#10;    packagingOptions {&#10;        pickFirst &quot;**/libc++_shared.so&quot;&#10;        pickFirst &quot;**/libndi.so&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation 'androidx.leanback:leanback:1.0.0'&#10;    implementation 'androidx.appcompat:appcompat:1.6.1'&#10;    implementation 'androidx.core:core:1.12.0'&#10;    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'&#10;    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.7.0'&#10;    implementation 'androidx.lifecycle:lifecycle-livedata:2.7.0'&#10;    implementation 'com.google.android.exoplayer:exoplayer:2.19.1'&#10;    implementation 'androidx.media3:media3-exoplayer:1.2.1'&#10;    implementation 'androidx.media3:media3-ui:1.2.1'&#10;    implementation 'androidx.media3:media3-common:1.2.1'&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@android:style/Theme.DeviceDefault&quot; /&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;!-- Permisos necesarios para NDI --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_MULTICAST_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;&#10;    &lt;!-- Características de Android TV --&gt;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.software.leanback&quot;&#10;        android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.touchscreen&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:banner=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Leanback&quot;&gt;&#10;        &#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.Leanback.Browse&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LEANBACK_LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &#10;        &lt;activity&#10;            android:name=&quot;.PlayerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Leanback.Details&quot; /&gt;&#10;            &#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/cpp/CMakeLists.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/cpp/CMakeLists.txt" />
              <option name="updatedContent" value="cmake_minimum_required(VERSION 3.22.1)&#10;&#10;project(&quot;ndiplayer&quot;)&#10;&#10;# Configuración de C++&#10;set(CMAKE_CXX_STANDARD 17)&#10;set(CMAKE_CXX_STANDARD_REQUIRED ON)&#10;&#10;# Agregar directorio de headers NDI&#10;include_directories(src/main/cpp/ndi/include)&#10;&#10;# Crear librería nativa&#10;add_library(&#10;    ndiplayer&#10;    SHARED&#10;    src/main/cpp/native-lib.cpp&#10;    src/main/cpp/ndi_wrapper.cpp&#10;)&#10;&#10;# Buscar librerías del sistema&#10;find_library(log-lib log)&#10;find_library(android-lib android)&#10;&#10;# Agregar librería NDI precompilada&#10;add_library(ndi SHARED IMPORTED)&#10;set_target_properties(&#10;    ndi&#10;    PROPERTIES&#10;    IMPORTED_LOCATION&#10;    ${CMAKE_CURRENT_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/libndi.so&#10;)&#10;&#10;# Enlazar librerías&#10;target_link_libraries(&#10;    ndiplayer&#10;    ndi&#10;    ${log-lib}&#10;    ${android-lib}&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/cpp/native-lib.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/cpp/native-lib.cpp" />
              <option name="updatedContent" value="#include &lt;jni.h&gt;&#10;#include &lt;string&gt;&#10;#include &lt;android/log.h&gt;&#10;&#10;#define LOG_TAG &quot;NDI_NativeLib&quot;&#10;#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)&#10;&#10;extern &quot;C&quot; JNIEXPORT jstring JNICALL&#10;Java_ndiplayer_oto_MainActivity_stringFromJNI(JNIEnv *env, jobject thiz) {&#10;    std::string hello = &quot;NDI Player Native Library Loaded&quot;;&#10;    LOGI(&quot;Native library initialized&quot;);&#10;    return env-&gt;NewStringUTF(hello.c_str());&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/cpp/ndi/include/Processing.NDI.Lib.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/cpp/ndi/include/Processing.NDI.Lib.h" />
              <option name="updatedContent" value="#pragma once&#10;&#10;// NDI SDK Headers - Simplified version for Android&#10;// This is a simplified header that includes the essential NDI functionality needed for Android&#10;&#10;#include &lt;stdint.h&gt;&#10;#include &lt;stdbool.h&gt;&#10;&#10;#ifdef __cplusplus&#10;extern &quot;C&quot; {&#10;#endif&#10;&#10;// NDI Video frame structure&#10;typedef struct NDIlib_video_frame_v2_t&#10;{&#10;    int xres, yres;&#10;    uint32_t FourCC;&#10;    int frame_rate_N, frame_rate_D;&#10;    float picture_aspect_ratio;&#10;    bool progressive;&#10;    int64_t timecode;&#10;    uint8_t* p_data;&#10;    int line_stride_in_bytes;&#10;    void* p_metadata;&#10;    int64_t timestamp;&#10;} NDIlib_video_frame_v2_t;&#10;&#10;// NDI Audio frame structure&#10;typedef struct NDIlib_audio_frame_v2_t&#10;{&#10;    int sample_rate;&#10;    int no_channels;&#10;    int no_samples;&#10;    int64_t timecode;&#10;    float* p_data;&#10;    int channel_stride_in_bytes;&#10;    void* p_metadata;&#10;    int64_t timestamp;&#10;} NDIlib_audio_frame_v2_t;&#10;&#10;// NDI Source structure&#10;typedef struct NDIlib_source_t&#10;{&#10;    const char* p_ndi_name;&#10;    const char* p_url_address;&#10;} NDIlib_source_t;&#10;&#10;// NDI Find instance&#10;typedef void* NDIlib_find_instance_t;&#10;&#10;// NDI Receiver instance&#10;typedef void* NDIlib_recv_instance_t;&#10;&#10;// NDI Find creation structure&#10;typedef struct NDIlib_find_create_t&#10;{&#10;    bool show_local_sources;&#10;    const char* p_groups;&#10;    const char* p_extra_ips;&#10;} NDIlib_find_create_t;&#10;&#10;// NDI Receiver creation structure&#10;typedef struct NDIlib_recv_create_v3_t&#10;{&#10;    NDIlib_source_t source_to_connect_to;&#10;    bool allow_video_fields;&#10;    int bandwidth;&#10;    const char* p_ndi_recv_name;&#10;} NDIlib_recv_create_v3_t;&#10;&#10;// Frame types&#10;typedef enum NDIlib_frame_type_e&#10;{&#10;    NDIlib_frame_type_none = 0,&#10;    NDIlib_frame_type_video = 1,&#10;    NDIlib_frame_type_audio = 2,&#10;    NDIlib_frame_type_metadata = 3,&#10;    NDIlib_frame_type_error = 4,&#10;    NDIlib_frame_type_status_change = 100&#10;} NDIlib_frame_type_e;&#10;&#10;// NDI Functions&#10;bool NDIlib_initialize(void);&#10;void NDIlib_destroy(void);&#10;&#10;NDIlib_find_instance_t NDIlib_find_create_v2(const NDIlib_find_create_t* p_create_settings);&#10;void NDIlib_find_destroy(NDIlib_find_instance_t p_instance);&#10;uint32_t NDIlib_find_get_current_sources(NDIlib_find_instance_t p_instance, uint32_t* p_no_sources, const NDIlib_source_t** pp_sources);&#10;&#10;NDIlib_recv_instance_t NDIlib_recv_create_v3(const NDIlib_recv_create_v3_t* p_create_settings);&#10;void NDIlib_recv_destroy(NDIlib_recv_instance_t p_instance);&#10;NDIlib_frame_type_e NDIlib_recv_capture_v2(NDIlib_recv_instance_t p_instance, NDIlib_video_frame_v2_t* p_video_data, NDIlib_audio_frame_v2_t* p_audio_data, void* p_metadata, uint32_t timeout_in_ms);&#10;void NDIlib_recv_free_video_v2(NDIlib_recv_instance_t p_instance, const NDIlib_video_frame_v2_t* p_video_data);&#10;void NDIlib_recv_free_audio_v2(NDIlib_recv_instance_t p_instance, const NDIlib_audio_frame_v2_t* p_audio_data);&#10;&#10;#ifdef __cplusplus&#10;}&#10;#endif" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/cpp/ndi_wrapper.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/cpp/ndi_wrapper.cpp" />
              <option name="updatedContent" value="#include &lt;jni.h&gt;&#10;#include &lt;string&gt;&#10;#include &lt;vector&gt;&#10;#include &lt;android/log.h&gt;&#10;#include &quot;Processing.NDI.Lib.h&quot;&#10;&#10;#define LOG_TAG &quot;NDI_Native&quot;&#10;#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)&#10;#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)&#10;&#10;static NDIlib_find_instance_t ndi_find = nullptr;&#10;static std::vector&lt;NDIlib_recv_instance_t&gt; ndi_receivers;&#10;&#10;extern &quot;C&quot; JNIEXPORT jboolean JNICALL&#10;Java_ndiplayer_oto_service_NDIDiscoveryService_nativeInitializeNDI(JNIEnv *env, jobject thiz) {&#10;    LOGI(&quot;Initializing NDI SDK&quot;);&#10;    &#10;    if (!NDIlib_initialize()) {&#10;        LOGE(&quot;Failed to initialize NDI SDK&quot;);&#10;        return JNI_FALSE;&#10;    }&#10;    &#10;    LOGI(&quot;NDI SDK initialized successfully&quot;);&#10;    return JNI_TRUE;&#10;}&#10;&#10;extern &quot;C&quot; JNIEXPORT void JNICALL&#10;Java_ndiplayer_oto_service_NDIDiscoveryService_nativeDestroyNDI(JNIEnv *env, jobject thiz) {&#10;    LOGI(&quot;Destroying NDI SDK&quot;);&#10;    &#10;    // Cleanup receivers&#10;    for (auto&amp; receiver : ndi_receivers) {&#10;        if (receiver) {&#10;            NDIlib_recv_destroy(receiver);&#10;        }&#10;    }&#10;    ndi_receivers.clear();&#10;    &#10;    // Cleanup finder&#10;    if (ndi_find) {&#10;        NDIlib_find_destroy(ndi_find);&#10;        ndi_find = nullptr;&#10;    }&#10;    &#10;    NDIlib_destroy();&#10;    LOGI(&quot;NDI SDK destroyed&quot;);&#10;}&#10;&#10;extern &quot;C&quot; JNIEXPORT jboolean JNICALL&#10;Java_ndiplayer_oto_service_NDIDiscoveryService_nativeStartDiscovery(JNIEnv *env, jobject thiz) {&#10;    LOGI(&quot;Starting NDI discovery&quot;);&#10;    &#10;    if (ndi_find) {&#10;        NDIlib_find_destroy(ndi_find);&#10;    }&#10;    &#10;    NDIlib_find_create_t find_create;&#10;    find_create.show_local_sources = true;&#10;    find_create.p_groups = nullptr;&#10;    find_create.p_extra_ips = nullptr;&#10;    &#10;    ndi_find = NDIlib_find_create_v2(&amp;find_create);&#10;    if (!ndi_find) {&#10;        LOGE(&quot;Failed to create NDI finder&quot;);&#10;        return JNI_FALSE;&#10;    }&#10;    &#10;    LOGI(&quot;NDI discovery started successfully&quot;);&#10;    return JNI_TRUE;&#10;}&#10;&#10;extern &quot;C&quot; JNIEXPORT jobjectArray JNICALL&#10;Java_ndiplayer_oto_service_NDIDiscoveryService_nativeGetSources(JNIEnv *env, jobject thiz) {&#10;    if (!ndi_find) {&#10;        LOGE(&quot;NDI finder not initialized&quot;);&#10;        return nullptr;&#10;    }&#10;    &#10;    uint32_t no_sources = 0;&#10;    const NDIlib_source_t* p_sources = nullptr;&#10;    &#10;    // Get current sources&#10;    NDIlib_find_get_current_sources(ndi_find, &amp;no_sources, &amp;p_sources);&#10;    &#10;    LOGI(&quot;Found %d NDI sources&quot;, no_sources);&#10;    &#10;    // Create Java string array&#10;    jclass stringClass = env-&gt;FindClass(&quot;java/lang/String&quot;);&#10;    jobjectArray sourceArray = env-&gt;NewObjectArray(no_sources * 2, stringClass, nullptr);&#10;    &#10;    for (uint32_t i = 0; i &lt; no_sources; i++) {&#10;        // Add source name&#10;        jstring sourceName = env-&gt;NewStringUTF(p_sources[i].p_ndi_name ? p_sources[i].p_ndi_name : &quot;Unknown&quot;);&#10;        env-&gt;SetObjectArrayElement(sourceArray, i * 2, sourceName);&#10;        &#10;        // Add source URL&#10;        jstring sourceUrl = env-&gt;NewStringUTF(p_sources[i].p_url_address ? p_sources[i].p_url_address : &quot;&quot;);&#10;        env-&gt;SetObjectArrayElement(sourceArray, i * 2 + 1, sourceUrl);&#10;        &#10;        env-&gt;DeleteLocalRef(sourceName);&#10;        env-&gt;DeleteLocalRef(sourceUrl);&#10;    }&#10;    &#10;    return sourceArray;&#10;}&#10;&#10;extern &quot;C&quot; JNIEXPORT jlong JNICALL&#10;Java_ndiplayer_oto_service_NDIReceiver_nativeCreateReceiver(JNIEnv *env, jobject thiz, &#10;                                                             jstring source_name, jstring source_url) {&#10;    const char* name = env-&gt;GetStringUTFChars(source_name, nullptr);&#10;    const char* url = env-&gt;GetStringUTFChars(source_url, nullptr);&#10;    &#10;    LOGI(&quot;Creating NDI receiver for: %s (%s)&quot;, name, url);&#10;    &#10;    NDIlib_recv_create_v3_t recv_create;&#10;    recv_create.source_to_connect_to.p_ndi_name = name;&#10;    recv_create.source_to_connect_to.p_url_address = url;&#10;    recv_create.allow_video_fields = false;&#10;    recv_create.bandwidth = -1; // Highest bandwidth&#10;    recv_create.p_ndi_recv_name = &quot;Android NDI Receiver&quot;;&#10;    &#10;    NDIlib_recv_instance_t receiver = NDIlib_recv_create_v3(&amp;recv_create);&#10;    &#10;    env-&gt;ReleaseStringUTFChars(source_name, name);&#10;    env-&gt;ReleaseStringUTFChars(source_url, url);&#10;    &#10;    if (!receiver) {&#10;        LOGE(&quot;Failed to create NDI receiver&quot;);&#10;        return 0;&#10;    }&#10;    &#10;    ndi_receivers.push_back(receiver);&#10;    LOGI(&quot;NDI receiver created successfully&quot;);&#10;    &#10;    return reinterpret_cast&lt;jlong&gt;(receiver);&#10;}&#10;&#10;extern &quot;C&quot; JNIEXPORT void JNICALL&#10;Java_ndiplayer_oto_service_NDIReceiver_nativeDestroyReceiver(JNIEnv *env, jobject thiz, jlong receiver_ptr) {&#10;    NDIlib_recv_instance_t receiver = reinterpret_cast&lt;NDIlib_recv_instance_t&gt;(receiver_ptr);&#10;    &#10;    if (receiver) {&#10;        LOGI(&quot;Destroying NDI receiver&quot;);&#10;        NDIlib_recv_destroy(receiver);&#10;        &#10;        // Remove from vector&#10;        auto it = std::find(ndi_receivers.begin(), ndi_receivers.end(), receiver);&#10;        if (it != ndi_receivers.end()) {&#10;            ndi_receivers.erase(it);&#10;        }&#10;    }&#10;}&#10;&#10;extern &quot;C&quot; JNIEXPORT jint JNICALL&#10;Java_ndiplayer_oto_service_NDIReceiver_nativeCaptureFrame(JNIEnv *env, jobject thiz, jlong receiver_ptr, &#10;                                                          jbyteArray video_data, jint timeout_ms) {&#10;    NDIlib_recv_instance_t receiver = reinterpret_cast&lt;NDIlib_recv_instance_t&gt;(receiver_ptr);&#10;    &#10;    if (!receiver) {&#10;        return -1; // Error&#10;    }&#10;    &#10;    NDIlib_video_frame_v2_t video_frame;&#10;    NDIlib_audio_frame_v2_t audio_frame;&#10;    &#10;    NDIlib_frame_type_e frame_type = NDIlib_recv_capture_v2(receiver, &amp;video_frame, &amp;audio_frame, nullptr, timeout_ms);&#10;    &#10;    switch (frame_type) {&#10;        case NDIlib_frame_type_video:&#10;            LOGI(&quot;Received video frame: %dx%d&quot;, video_frame.xres, video_frame.yres);&#10;            &#10;            if (video_data &amp;&amp; video_frame.p_data) {&#10;                // Calculate frame size&#10;                int frame_size = video_frame.yres * video_frame.line_stride_in_bytes;&#10;                &#10;                // Ensure Java array is large enough&#10;                jsize array_size = env-&gt;GetArrayLength(video_data);&#10;                if (array_size &gt;= frame_size) {&#10;                    // Copy video data to Java array&#10;                    env-&gt;SetByteArrayRegion(video_data, 0, frame_size, &#10;                                          reinterpret_cast&lt;const jbyte*&gt;(video_frame.p_data));&#10;                }&#10;            }&#10;            &#10;            // Free the video frame&#10;            NDIlib_recv_free_video_v2(receiver, &amp;video_frame);&#10;            return 1; // Video frame&#10;            &#10;        case NDIlib_frame_type_audio:&#10;            LOGI(&quot;Received audio frame&quot;);&#10;            NDIlib_recv_free_audio_v2(receiver, &amp;audio_frame);&#10;            return 2; // Audio frame&#10;            &#10;        case NDIlib_frame_type_none:&#10;            return 0; // No frame&#10;            &#10;        default:&#10;            LOGE(&quot;Received error or unknown frame type: %d&quot;, frame_type);&#10;            return -1; // Error&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/MainActivity.java" />
              <option name="updatedContent" value="package ndiplayer.oto;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.widget.Toast;&#10;&#10;import androidx.fragment.app.FragmentActivity;&#10;import androidx.leanback.app.BrowseSupportFragment;&#10;import androidx.leanback.widget.ArrayObjectAdapter;&#10;import androidx.leanback.widget.HeaderItem;&#10;import androidx.leanback.widget.ListRow;&#10;import androidx.leanback.widget.ListRowPresenter;&#10;import androidx.leanback.widget.OnItemViewClickedListener;&#10;import androidx.leanback.widget.OnItemViewSelectedListener;&#10;import androidx.leanback.widget.Presenter;&#10;import androidx.leanback.widget.Row;&#10;import androidx.leanback.widget.RowPresenter;&#10;&#10;import java.util.List;&#10;&#10;import ndiplayer.oto.model.NDISource;&#10;import ndiplayer.oto.presenter.NDISourcePresenter;&#10;import ndiplayer.oto.service.NDIDiscoveryService;&#10;&#10;public class MainActivity extends FragmentActivity {&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;    &#10;    private BrowseSupportFragment browseSupportFragment;&#10;    private NDIDiscoveryService ndiDiscoveryService;&#10;    private ArrayObjectAdapter rowsAdapter;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;        &#10;        setupBrowseFragment();&#10;        setupNDIDiscovery();&#10;        startNDIDiscovery();&#10;    }&#10;&#10;    private void setupBrowseFragment() {&#10;        browseSupportFragment = new BrowseSupportFragment();&#10;        getSupportFragmentManager().beginTransaction()&#10;                .replace(R.id.main_browse_fragment, browseSupportFragment)&#10;                .commitNow();&#10;&#10;        browseSupportFragment.setTitle(getString(R.string.browse_title));&#10;        browseSupportFragment.setHeadersState(BrowseSupportFragment.HEADERS_ENABLED);&#10;        browseSupportFragment.setHeadersTransitionOnBackEnabled(true);&#10;&#10;        // Configurar adaptador de filas&#10;        rowsAdapter = new ArrayObjectAdapter(new ListRowPresenter());&#10;        browseSupportFragment.setAdapter(rowsAdapter);&#10;&#10;        // Configurar listeners&#10;        browseSupportFragment.setOnItemViewClickedListener(new OnItemViewClickedListener() {&#10;            @Override&#10;            public void onItemClicked(Presenter.ViewHolder itemViewHolder, Object item,&#10;                                    RowPresenter.ViewHolder rowViewHolder, Row row) {&#10;                if (item instanceof NDISource) {&#10;                    NDISource source = (NDISource) item;&#10;                    openPlayerActivity(source);&#10;                }&#10;            }&#10;        });&#10;&#10;        browseSupportFragment.setOnItemViewSelectedListener(new OnItemViewSelectedListener() {&#10;            @Override&#10;            public void onItemSelected(Presenter.ViewHolder itemViewHolder, Object item,&#10;                                     RowPresenter.ViewHolder rowViewHolder, Row row) {&#10;                if (item instanceof NDISource) {&#10;                    NDISource source = (NDISource) item;&#10;                    Log.d(TAG, &quot;Selected NDI source: &quot; + source.getName());&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void setupNDIDiscovery() {&#10;        ndiDiscoveryService = new NDIDiscoveryService(this);&#10;        ndiDiscoveryService.setDiscoveryListener(new NDIDiscoveryService.NDIDiscoveryListener() {&#10;            @Override&#10;            public void onSourceDiscovered(NDISource source) {&#10;                Log.d(TAG, &quot;NDI source discovered: &quot; + source.getName());&#10;                // Se actualizará la UI cuando se complete el descubrimiento&#10;            }&#10;&#10;            @Override&#10;            public void onDiscoveryComplete(List&lt;NDISource&gt; sources) {&#10;                Log.d(TAG, &quot;NDI discovery complete. Found &quot; + sources.size() + &quot; sources&quot;);&#10;                updateNDISourcesList(sources);&#10;            }&#10;&#10;            @Override&#10;            public void onDiscoveryError(String error) {&#10;                Log.e(TAG, &quot;NDI discovery error: &quot; + error);&#10;                Toast.makeText(MainActivity.this, &#10;                    getString(R.string.ndi_connection_failed) + &quot;: &quot; + error, &#10;                    Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startNDIDiscovery() {&#10;        Toast.makeText(this, getString(R.string.searching_ndi_sources), Toast.LENGTH_SHORT).show();&#10;        ndiDiscoveryService.startDiscovery();&#10;    }&#10;&#10;    private void updateNDISourcesList(List&lt;NDISource&gt; sources) {&#10;        runOnUiThread(() -&gt; {&#10;            rowsAdapter.clear();&#10;            &#10;            if (sources.isEmpty()) {&#10;                Toast.makeText(this, getString(R.string.no_ndi_sources), Toast.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;&#10;            // Crear fila para fuentes NDI&#10;            ArrayObjectAdapter listRowAdapter = new ArrayObjectAdapter(new NDISourcePresenter());&#10;            for (NDISource source : sources) {&#10;                listRowAdapter.add(source);&#10;            }&#10;&#10;            HeaderItem header = new HeaderItem(0, getString(R.string.browse_title));&#10;            rowsAdapter.add(new ListRow(header, listRowAdapter));&#10;        });&#10;    }&#10;&#10;    private void openPlayerActivity(NDISource source) {&#10;        Intent intent = new Intent(this, PlayerActivity.class);&#10;        intent.putExtra(&quot;ndi_source_name&quot;, source.getName());&#10;        intent.putExtra(&quot;ndi_source_url&quot;, source.getStreamUrl());&#10;        intent.putExtra(&quot;ndi_source_description&quot;, source.getDescription());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (ndiDiscoveryService != null) {&#10;            ndiDiscoveryService.cleanup();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        if (browseSupportFragment != null &amp;&amp; browseSupportFragment.isShowingHeaders()) {&#10;            browseSupportFragment.startHeadersTransition(false);&#10;        } else {&#10;            super.onBackPressed();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/PlayerActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/PlayerActivity.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package ndiplayer.oto;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.KeyEvent;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.FragmentActivity;&#10;import androidx.media3.common.MediaItem;&#10;import androidx.media3.common.PlaybackException;&#10;import androidx.media3.common.Player;&#10;import androidx.media3.exoplayer.ExoPlayer;&#10;import androidx.media3.exoplayer.source.MediaSource;&#10;import androidx.media3.ui.PlayerView;&#10;&#10;import ndiplayer.oto.service.NDIMediaSource;&#10;&#10;public class PlayerActivity extends FragmentActivity {&#10;    private static final String TAG = &quot;PlayerActivity&quot;;&#10;&#10;    static {&#10;        System.loadLibrary(&quot;ndiplayer&quot;);&#10;    }&#10;&#10;    private ExoPlayer player;&#10;    private PlayerView playerView;&#10;    private String sourceUrl;&#10;    private String sourceName;&#10;    private String sourceDescription;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_player);&#10;&#10;        // Obtener datos de la fuente NDI desde el intent&#10;        sourceUrl = getIntent().getStringExtra(&quot;ndi_source_url&quot;);&#10;        sourceName = getIntent().getStringExtra(&quot;ndi_source_name&quot;);&#10;        sourceDescription = getIntent().getStringExtra(&quot;ndi_source_description&quot;);&#10;&#10;        if (sourceUrl == null || sourceName == null) {&#10;            Toast.makeText(this, getString(R.string.ndi_source_not_found), Toast.LENGTH_LONG).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        setupPlayer();&#10;        startNDIPlayback();&#10;    }&#10;&#10;    private void setupPlayer() {&#10;        playerView = findViewById(R.id.player_view);&#10;&#10;        player = new ExoPlayer.Builder(this).build();&#10;        playerView.setPlayer(player);&#10;&#10;        // Configurar listeners del reproductor&#10;        player.addListener(new Player.Listener() {&#10;            @Override&#10;            public void onPlaybackStateChanged(int playbackState) {&#10;                switch (playbackState) {&#10;                    case Player.STATE_BUFFERING:&#10;                        Log.d(TAG, &quot;Player buffering - Connecting to NDI source&quot;);&#10;                        Toast.makeText(PlayerActivity.this,&#10;                            getString(R.string.connecting_to_ndi), Toast.LENGTH_SHORT).show();&#10;                        break;&#10;                    case Player.STATE_READY:&#10;                        Log.d(TAG, &quot;Player ready - NDI stream connected successfully&quot;);&#10;                        Toast.makeText(PlayerActivity.this,&#10;                            &quot;Conectado a: &quot; + sourceName, Toast.LENGTH_SHORT).show();&#10;                        break;&#10;                    case Player.STATE_ENDED:&#10;                        Log.d(TAG, &quot;Playback ended&quot;);&#10;                        finish();&#10;                        break;&#10;                    case Player.STATE_IDLE:&#10;                        Log.d(TAG, &quot;Player idle&quot;);&#10;                        break;&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onPlayerError(PlaybackException error) {&#10;                Log.e(TAG, &quot;Player error: &quot; + error.getMessage(), error);&#10;                Toast.makeText(PlayerActivity.this,&#10;                    &quot;Error reproduciendo fuente NDI: &quot; + error.getMessage(),&#10;                    Toast.LENGTH_LONG).show();&#10;                finish();&#10;            }&#10;&#10;            @Override&#10;            public void onIsPlayingChanged(boolean isPlaying) {&#10;                Log.d(TAG, &quot;Is playing changed: &quot; + isPlaying);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startNDIPlayback() {&#10;        Log.d(TAG, &quot;Starting NDI playback for: &quot; + sourceName + &quot; (&quot; + sourceUrl + &quot;)&quot;);&#10;&#10;        try {&#10;            // Crear MediaSource usando el SDK NDI real&#10;            MediaSource mediaSource = NDIMediaSource.createMediaSource(sourceName, sourceUrl);&#10;&#10;            // Configurar y iniciar reproducción&#10;            player.setMediaSource(mediaSource);&#10;            player.prepare();&#10;            player.setPlayWhenReady(true);&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error starting NDI playback&quot;, e);&#10;            Toast.makeText(this, &quot;Error iniciando reproducción NDI: &quot; + e.getMessage(),&#10;                Toast.LENGTH_LONG).show();&#10;            finish();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onKeyDown(int keyCode, KeyEvent event) {&#10;        if (keyCode == KeyEvent.KEYCODE_BACK) {&#10;            finish();&#10;            return true;&#10;        }&#10;&#10;        // Manejar controles del mando de TV&#10;        switch (keyCode) {&#10;            case KeyEvent.KEYCODE_DPAD_CENTER:&#10;            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:&#10;                if (player != null) {&#10;                    if (player.isPlaying()) {&#10;                        player.pause();&#10;                    } else {&#10;                        player.play();&#10;                    }&#10;                }&#10;                return true;&#10;&#10;            case KeyEvent.KEYCODE_MEDIA_STOP:&#10;                if (player != null) {&#10;                    player.stop();&#10;                }&#10;                finish();&#10;                return true;&#10;        }&#10;&#10;        return super.onKeyDown(keyCode, event);&#10;    }&#10;&#10;    @Override&#10;    protected void onStop() {&#10;        super.onStop();&#10;        if (player != null) {&#10;            player.pause();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (player != null) {&#10;            player.release();&#10;            player = null;&#10;        }&#10;    }&#10;&#10;    // Native method para testing&#10;    public native String stringFromJNI();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/model/NDISource.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/model/NDISource.java" />
              <option name="updatedContent" value="package ndiplayer.oto.model;&#10;&#10;public class NDISource {&#10;    private String name;&#10;    private String ipAddress;&#10;    private int port;&#10;    private String description;&#10;    private boolean isConnected;&#10;&#10;    public NDISource(String name, String ipAddress, int port) {&#10;        this.name = name;&#10;        this.ipAddress = ipAddress;&#10;        this.port = port;&#10;        this.description = &quot;&quot;;&#10;        this.isConnected = false;&#10;    }&#10;&#10;    public NDISource(String name, String ipAddress, int port, String description) {&#10;        this.name = name;&#10;        this.ipAddress = ipAddress;&#10;        this.port = port;&#10;        this.description = description;&#10;        this.isConnected = false;&#10;    }&#10;&#10;    // Getters&#10;    public String getName() { return name; }&#10;    public String getIpAddress() { return ipAddress; }&#10;    public int getPort() { return port; }&#10;    public String getDescription() { return description; }&#10;    public boolean isConnected() { return isConnected; }&#10;&#10;    // Setters&#10;    public void setName(String name) { this.name = name; }&#10;    public void setIpAddress(String ipAddress) { this.ipAddress = ipAddress; }&#10;    public void setPort(int port) { this.port = port; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public void setConnected(boolean connected) { this.isConnected = connected; }&#10;&#10;    public String getStreamUrl() {&#10;        return &quot;udp://&quot; + ipAddress + &quot;:&quot; + port;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return name + &quot; (&quot; + ipAddress + &quot;:&quot; + port + &quot;)&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/presenter/NDISourcePresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/presenter/NDISourcePresenter.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package ndiplayer.oto.presenter;&#10;&#10;import android.graphics.Color;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.leanback.widget.ImageCardView;&#10;import androidx.leanback.widget.Presenter;&#10;&#10;import ndiplayer.oto.model.NDISource;&#10;&#10;public class NDISourcePresenter extends Presenter {&#10;    private static final int CARD_WIDTH = 313;&#10;    private static final int CARD_HEIGHT = 176;&#10;&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(ViewGroup parent) {&#10;        ImageCardView cardView = new ImageCardView(parent.getContext()) {&#10;            @Override&#10;            public void setSelected(boolean selected) {&#10;                updateCardBackgroundColor(this, selected);&#10;                super.setSelected(selected);&#10;            }&#10;        };&#10;&#10;        cardView.setFocusable(true);&#10;        cardView.setFocusableInTouchMode(true);&#10;        updateCardBackgroundColor(cardView, false);&#10;        return new ViewHolder(cardView);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(ViewHolder viewHolder, Object item) {&#10;        NDISource source = (NDISource) item;&#10;        ImageCardView cardView = (ImageCardView) viewHolder.view;&#10;&#10;        cardView.setTitleText(source.getName());&#10;        cardView.setContentText(source.getDescription());&#10;        cardView.setMainImageDimensions(CARD_WIDTH, CARD_HEIGHT);&#10;        &#10;        // Establecer una imagen por defecto para las fuentes NDI&#10;        cardView.setMainImageScaleType(ImageCardView.MAIN_IMAGE_SCALE_TYPE_CENTER_CROP);&#10;        &#10;        // Establecer un color de fondo basado en el estado de conexión&#10;        if (source.isConnected()) {&#10;            cardView.setInfoAreaBackgroundColor(Color.parseColor(&quot;#4CAF50&quot;)); // Verde&#10;        } else {&#10;            cardView.setInfoAreaBackgroundColor(Color.parseColor(&quot;#2196F3&quot;)); // Azul&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onUnbindViewHolder(ViewHolder viewHolder) {&#10;        ImageCardView cardView = (ImageCardView) viewHolder.view;&#10;        // Limpiar referencias&#10;        cardView.setBadgeImage(null);&#10;        cardView.setMainImage(null);&#10;    }&#10;&#10;    private static void updateCardBackgroundColor(ImageCardView view, boolean selected) {&#10;        int color = selected ? Color.parseColor(&quot;#FF5722&quot;) : Color.parseColor(&quot;#2E2E2E&quot;);&#10;        view.setBackgroundColor(color);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/service/NDIDiscoveryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/service/NDIDiscoveryService.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package ndiplayer.oto.service;&#10;&#10;import android.content.Context;&#10;import android.net.wifi.WifiManager;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.util.Log;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;import ndiplayer.oto.model.NDISource;&#10;&#10;public class NDIDiscoveryService {&#10;    private static final String TAG = &quot;NDIDiscoveryService&quot;;&#10;    private static final int DISCOVERY_TIMEOUT = 5000; // 5 segundos&#10;&#10;    static {&#10;        System.loadLibrary(&quot;ndiplayer&quot;);&#10;    }&#10;&#10;    private Context context;&#10;    private ExecutorService executorService;&#10;    private Handler mainHandler;&#10;    private List&lt;NDISource&gt; discoveredSources;&#10;    private NDIDiscoveryListener listener;&#10;    private boolean isDiscovering = false;&#10;    private WifiManager.MulticastLock multicastLock;&#10;&#10;    // Native methods&#10;    private native boolean nativeInitializeNDI();&#10;    private native void nativeDestroyNDI();&#10;    private native boolean nativeStartDiscovery();&#10;    private native String[] nativeGetSources();&#10;&#10;    public interface NDIDiscoveryListener {&#10;        void onSourceDiscovered(NDISource source);&#10;        void onDiscoveryComplete(List&lt;NDISource&gt; sources);&#10;        void onDiscoveryError(String error);&#10;    }&#10;&#10;    public NDIDiscoveryService(Context context) {&#10;        this.context = context;&#10;        this.executorService = Executors.newSingleThreadExecutor();&#10;        this.mainHandler = new Handler(Looper.getMainLooper());&#10;        this.discoveredSources = new ArrayList&lt;&gt;();&#10;&#10;        // Obtener multicast lock para permitir recepción de paquetes multicast&#10;        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);&#10;        if (wifiManager != null) {&#10;            multicastLock = wifiManager.createMulticastLock(&quot;NDIDiscovery&quot;);&#10;        }&#10;&#10;        // Inicializar NDI SDK&#10;        if (!nativeInitializeNDI()) {&#10;            Log.e(TAG, &quot;Failed to initialize NDI SDK&quot;);&#10;        } else {&#10;            Log.i(TAG, &quot;NDI SDK initialized successfully&quot;);&#10;        }&#10;    }&#10;&#10;    public void setDiscoveryListener(NDIDiscoveryListener listener) {&#10;        this.listener = listener;&#10;    }&#10;&#10;    public void startDiscovery() {&#10;        if (isDiscovering) {&#10;            Log.w(TAG, &quot;Discovery already in progress&quot;);&#10;            return;&#10;        }&#10;&#10;        isDiscovering = true;&#10;        discoveredSources.clear();&#10;&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                if (multicastLock != null) {&#10;                    multicastLock.acquire();&#10;                }&#10;                performNDIDiscovery();&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error during NDI discovery&quot;, e);&#10;                notifyError(&quot;Error durante el descubrimiento: &quot; + e.getMessage());&#10;            } finally {&#10;                if (multicastLock != null &amp;&amp; multicastLock.isHeld()) {&#10;                    multicastLock.release();&#10;                }&#10;                isDiscovering = false;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void performNDIDiscovery() {&#10;        Log.d(TAG, &quot;Starting real NDI discovery&quot;);&#10;&#10;        // Iniciar descubrimiento nativo&#10;        if (!nativeStartDiscovery()) {&#10;            notifyError(&quot;Failed to start NDI discovery&quot;);&#10;            return;&#10;        }&#10;&#10;        // Esperar un momento para que el descubrimiento encuentre fuentes&#10;        try {&#10;            Thread.sleep(DISCOVERY_TIMEOUT);&#10;        } catch (InterruptedException e) {&#10;            Log.w(TAG, &quot;Discovery interrupted&quot;);&#10;            return;&#10;        }&#10;&#10;        // Obtener fuentes encontradas&#10;        String[] sourcesData = nativeGetSources();&#10;        if (sourcesData != null) {&#10;            processSources(sourcesData);&#10;        }&#10;&#10;        notifyDiscoveryComplete();&#10;    }&#10;&#10;    private void processSources(String[] sourcesData) {&#10;        // Los datos vienen en pares: [name, url, name, url, ...]&#10;        for (int i = 0; i &lt; sourcesData.length; i += 2) {&#10;            if (i + 1 &lt; sourcesData.length) {&#10;                String name = sourcesData[i];&#10;                String url = sourcesData[i + 1];&#10;&#10;                Log.d(TAG, &quot;Found NDI source: &quot; + name + &quot; (&quot; + url + &quot;)&quot;);&#10;&#10;                // Extraer IP y puerto de la URL&#10;                String ipAddress = extractIpFromUrl(url);&#10;                int port = extractPortFromUrl(url);&#10;&#10;                NDISource source = new NDISource(name, ipAddress, port, &quot;NDI Source&quot;);&#10;                discoveredSources.add(source);&#10;&#10;                // Notificar fuente encontrada&#10;                mainHandler.post(() -&gt; {&#10;                    if (listener != null) {&#10;                        listener.onSourceDiscovered(source);&#10;                    }&#10;                });&#10;            }&#10;        }&#10;    }&#10;&#10;    private String extractIpFromUrl(String url) {&#10;        if (url == null || url.isEmpty()) {&#10;            return &quot;127.0.0.1&quot;;&#10;        }&#10;&#10;        // Formato típico: &quot;ip:port&quot; o &quot;hostname:port&quot;&#10;        String[] parts = url.split(&quot;:&quot;);&#10;        if (parts.length &gt; 0) {&#10;            return parts[0];&#10;        }&#10;&#10;        return &quot;127.0.0.1&quot;;&#10;    }&#10;&#10;    private int extractPortFromUrl(String url) {&#10;        if (url == null || url.isEmpty()) {&#10;            return 5960; // Puerto NDI por defecto&#10;        }&#10;&#10;        String[] parts = url.split(&quot;:&quot;);&#10;        if (parts.length &gt; 1) {&#10;            try {&#10;                return Integer.parseInt(parts[1]);&#10;            } catch (NumberFormatException e) {&#10;                Log.w(TAG, &quot;Failed to parse port from URL: &quot; + url);&#10;            }&#10;        }&#10;&#10;        return 5960; // Puerto NDI por defecto&#10;    }&#10;&#10;    private void notifyDiscoveryComplete() {&#10;        mainHandler.post(() -&gt; {&#10;            if (listener != null) {&#10;                listener.onDiscoveryComplete(new ArrayList&lt;&gt;(discoveredSources));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void notifyError(String error) {&#10;        mainHandler.post(() -&gt; {&#10;            if (listener != null) {&#10;                listener.onDiscoveryError(error);&#10;            }&#10;        });&#10;    }&#10;&#10;    public void stopDiscovery() {&#10;        isDiscovering = false;&#10;    }&#10;&#10;    public List&lt;NDISource&gt; getDiscoveredSources() {&#10;        return new ArrayList&lt;&gt;(discoveredSources);&#10;    }&#10;&#10;    public void cleanup() {&#10;        Log.d(TAG, &quot;Cleaning up NDI Discovery Service&quot;);&#10;        &#10;        stopDiscovery();&#10;        &#10;        if (executorService != null &amp;&amp; !executorService.isShutdown()) {&#10;            executorService.shutdown();&#10;        }&#10;        &#10;        if (multicastLock != null &amp;&amp; multicastLock.isHeld()) {&#10;            multicastLock.release();&#10;        }&#10;        &#10;        // Destruir SDK NDI nativo&#10;        nativeDestroyNDI();&#10;        &#10;        discoveredSources.clear();&#10;        listener = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/service/NDIMediaSource.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/service/NDIMediaSource.java" />
              <option name="updatedContent" value="package ndiplayer.oto.service;&#10;&#10;import android.net.Uri;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.Nullable;&#10;import androidx.media3.common.C;&#10;import androidx.media3.common.MediaItem;&#10;import androidx.media3.common.util.UnstableApi;&#10;import androidx.media3.datasource.DataSource;&#10;import androidx.media3.datasource.DataSpec;&#10;import androidx.media3.datasource.TransferListener;&#10;import androidx.media3.exoplayer.source.MediaSource;&#10;import androidx.media3.exoplayer.source.ProgressiveMediaSource;&#10;&#10;import java.io.IOException;&#10;import java.nio.ByteBuffer;&#10;import java.util.concurrent.BlockingQueue;&#10;import java.util.concurrent.LinkedBlockingQueue;&#10;&#10;@UnstableApi&#10;public class NDIMediaSource implements DataSource {&#10;    private static final String TAG = &quot;NDIMediaSource&quot;;&#10;    private static final int BUFFER_SIZE = 1920 * 1080 * 4; // 4K RGBA buffer&#10;&#10;    private NDIReceiver ndiReceiver;&#10;    private String sourceName;&#10;    private String sourceUrl;&#10;    private boolean isOpen = false;&#10;    private BlockingQueue&lt;ByteBuffer&gt; frameQueue;&#10;    private byte[] frameBuffer;&#10;&#10;    public NDIMediaSource(String sourceName, String sourceUrl) {&#10;        this.sourceName = sourceName;&#10;        this.sourceUrl = sourceUrl;&#10;        this.ndiReceiver = new NDIReceiver();&#10;        this.frameQueue = new LinkedBlockingQueue&lt;&gt;();&#10;        this.frameBuffer = new byte[BUFFER_SIZE];&#10;    }&#10;&#10;    @Override&#10;    public void addTransferListener(TransferListener transferListener) {&#10;        // Implementation for transfer listener&#10;    }&#10;&#10;    @Override&#10;    public long open(DataSpec dataSpec) throws IOException {&#10;        Log.d(TAG, &quot;Opening NDI data source for: &quot; + sourceName);&#10;&#10;        if (!ndiReceiver.createReceiver(sourceName, sourceUrl)) {&#10;            throw new IOException(&quot;Failed to create NDI receiver for: &quot; + sourceName);&#10;        }&#10;&#10;        isOpen = true;&#10;        &#10;        // Start frame capture thread&#10;        new Thread(this::captureFrames).start();&#10;        &#10;        return C.LENGTH_UNSET; // Live stream, length unknown&#10;    }&#10;&#10;    @Override&#10;    public int read(byte[] buffer, int offset, int length) throws IOException {&#10;        if (!isOpen) {&#10;            return C.RESULT_END_OF_INPUT;&#10;        }&#10;&#10;        try {&#10;            // Get frame from queue (blocking)&#10;            ByteBuffer frameData = frameQueue.take();&#10;            &#10;            int bytesToCopy = Math.min(length, frameData.remaining());&#10;            frameData.get(buffer, offset, bytesToCopy);&#10;            &#10;            return bytesToCopy;&#10;        } catch (InterruptedException e) {&#10;            Log.w(TAG, &quot;Frame read interrupted&quot;);&#10;            return C.RESULT_END_OF_INPUT;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    @Nullable&#10;    public Uri getUri() {&#10;        return Uri.parse(&quot;ndi://&quot; + sourceName);&#10;    }&#10;&#10;    @Override&#10;    public void close() throws IOException {&#10;        Log.d(TAG, &quot;Closing NDI data source&quot;);&#10;        isOpen = false;&#10;        &#10;        if (ndiReceiver != null) {&#10;            ndiReceiver.destroyReceiver();&#10;        }&#10;        &#10;        frameQueue.clear();&#10;    }&#10;&#10;    private void captureFrames() {&#10;        Log.d(TAG, &quot;Starting frame capture thread&quot;);&#10;        &#10;        while (isOpen &amp;&amp; ndiReceiver.isReceiving()) {&#10;            try {&#10;                int result = ndiReceiver.captureFrame(frameBuffer, 100); // 100ms timeout&#10;                &#10;                if (result == 1) { // Video frame received&#10;                    ByteBuffer frameData = ByteBuffer.allocate(frameBuffer.length);&#10;                    frameData.put(frameBuffer);&#10;                    frameData.flip();&#10;                    &#10;                    // Add to queue (non-blocking)&#10;                    if (!frameQueue.offer(frameData)) {&#10;                        // Queue is full, remove oldest frame&#10;                        frameQueue.poll();&#10;                        frameQueue.offer(frameData);&#10;                    }&#10;                }&#10;                &#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error capturing NDI frame&quot;, e);&#10;                break;&#10;            }&#10;        }&#10;        &#10;        Log.d(TAG, &quot;Frame capture thread ended&quot;);&#10;    }&#10;&#10;    public static MediaSource createMediaSource(String sourceName, String sourceUrl) {&#10;        DataSource.Factory dataSourceFactory = () -&gt; new NDIMediaSource(sourceName, sourceUrl);&#10;        &#10;        MediaItem mediaItem = MediaItem.fromUri(&quot;ndi://&quot; + sourceName);&#10;        &#10;        return new ProgressiveMediaSource.Factory(dataSourceFactory)&#10;                .createMediaSource(mediaItem);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/service/NDIReceiver.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ndiplayer/oto/service/NDIReceiver.java" />
              <option name="updatedContent" value="package ndiplayer.oto.service;&#10;&#10;import android.util.Log;&#10;&#10;public class NDIReceiver {&#10;    private static final String TAG = &quot;NDIReceiver&quot;;&#10;    &#10;    static {&#10;        System.loadLibrary(&quot;ndiplayer&quot;);&#10;    }&#10;    &#10;    private long nativeReceiverPtr = 0;&#10;    private boolean isReceiving = false;&#10;    &#10;    // Native methods&#10;    private native long nativeCreateReceiver(String sourceName, String sourceUrl);&#10;    private native void nativeDestroyReceiver(long receiverPtr);&#10;    private native int nativeCaptureFrame(long receiverPtr, byte[] videoData, int timeoutMs);&#10;    &#10;    public boolean createReceiver(String sourceName, String sourceUrl) {&#10;        Log.d(TAG, &quot;Creating receiver for: &quot; + sourceName);&#10;        &#10;        nativeReceiverPtr = nativeCreateReceiver(sourceName, sourceUrl);&#10;        if (nativeReceiverPtr == 0) {&#10;            Log.e(TAG, &quot;Failed to create native receiver&quot;);&#10;            return false;&#10;        }&#10;        &#10;        isReceiving = true;&#10;        Log.d(TAG, &quot;Receiver created successfully&quot;);&#10;        return true;&#10;    }&#10;    &#10;    public void destroyReceiver() {&#10;        if (nativeReceiverPtr != 0) {&#10;            Log.d(TAG, &quot;Destroying receiver&quot;);&#10;            isReceiving = false;&#10;            nativeDestroyReceiver(nativeReceiverPtr);&#10;            nativeReceiverPtr = 0;&#10;        }&#10;    }&#10;    &#10;    public int captureFrame(byte[] videoData, int timeoutMs) {&#10;        if (nativeReceiverPtr == 0 || !isReceiving) {&#10;            return -1;&#10;        }&#10;        &#10;        return nativeCaptureFrame(nativeReceiverPtr, videoData, timeoutMs);&#10;    }&#10;    &#10;    public boolean isReceiving() {&#10;        return isReceiving &amp;&amp; nativeReceiverPtr != 0;&#10;    }&#10;    &#10;    @Override&#10;    protected void finalize() throws Throwable {&#10;        destroyReceiver();&#10;        super.finalize();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/jniLibs/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/jniLibs/README.md" />
              <option name="updatedContent" value="# Librerías NDI Nativas&#10;&#10;Este directorio debe contener las librerías NDI del SDK oficial para cada arquitectura:&#10;&#10;```&#10;jniLibs/&#10;├── arm64-v8a/&#10;│   └── libndi.so&#10;├── armeabi-v7a/&#10;│   └── libndi.so  &#10;├── x86/&#10;│   └── libndi.so&#10;└── x86_64/&#10;    └── libndi.so&#10;```&#10;&#10;Copia las librerías del SDK NDI que descargaste en estos directorios." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/player_controls_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/player_controls_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#80000000&quot;&#10;        android:endColor=&quot;#00000000&quot;&#10;        android:angle=&quot;90&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;fragment xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main_browse_fragment&quot;&#10;    android:name=&quot;androidx.leanback.app.BrowseSupportFragment&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.MainActivity&quot;&#10;    tools:deviceIds=&quot;tv&quot;&#10;    tools:ignore=&quot;FragmentTagUsage&quot; /&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_player.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_player.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;androidx.media3.ui.PlayerView&#10;        android:id=&quot;@+id/player_view&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_centerInParent=&quot;true&quot;&#10;        app:use_controller=&quot;true&quot;&#10;        app:show_buffering=&quot;when_playing&quot;&#10;        app:controller_layout_id=&quot;@layout/custom_player_control_view&quot; /&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/custom_player_control_view.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/custom_player_control_view.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_gravity=&quot;bottom&quot;&#10;    android:background=&quot;@drawable/player_controls_background&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- Información de la fuente NDI --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/source_name&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Fuente NDI&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/connection_status&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;●&quot;&#10;            android:textColor=&quot;#4CAF50&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Controles de reproducción --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/exo_prev&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:contentDescription=&quot;Anterior&quot;&#10;            android:tint=&quot;@color/text_primary&quot;&#10;            android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/exo_rew&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:contentDescription=&quot;Retroceder&quot;&#10;            android:tint=&quot;@color/text_primary&quot;&#10;            android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/exo_play_pause&quot;&#10;            android:layout_width=&quot;64dp&quot;&#10;            android:layout_height=&quot;64dp&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:contentDescription=&quot;Reproducir/Pausar&quot;&#10;            android:tint=&quot;@color/text_primary&quot;&#10;            android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/exo_ffwd&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:contentDescription=&quot;Avanzar&quot;&#10;            android:tint=&quot;@color/text_primary&quot;&#10;            android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/exo_next&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:contentDescription=&quot;Siguiente&quot;&#10;            android:tint=&quot;@color/text_primary&quot;&#10;            android:focusable=&quot;true&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Barra de progreso --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/exo_position&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:text=&quot;00:00&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:id=&quot;@+id/exo_progress&quot;&#10;            style=&quot;@android:style/Widget.ProgressBar.Horizontal&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/exo_duration&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot;00:00&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;primary_color&quot;&gt;#1976D2&lt;/color&gt;&#10;    &lt;color name=&quot;primary_dark_color&quot;&gt;#0D47A1&lt;/color&gt;&#10;    &lt;color name=&quot;accent_color&quot;&gt;#FF5722&lt;/color&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;card_background&quot;&gt;#2E2E2E&lt;/color&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B0BEC5&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;NDI Player&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;NDI Player&lt;/string&gt;&#10;    &lt;string name=&quot;browse_title&quot;&gt;Fuentes NDI&lt;/string&gt;&#10;    &lt;string name=&quot;related_movies&quot;&gt;Videos relacionados&lt;/string&gt;&#10;    &lt;string name=&quot;grid_view&quot;&gt;Vista en cuadrícula&lt;/string&gt;&#10;    &lt;string name=&quot;error_fragment&quot;&gt;Error&lt;/string&gt;&#10;    &lt;string name=&quot;personal_settings&quot;&gt;Configuración personal&lt;/string&gt;&#10;    &lt;string name=&quot;watch_trailer_1&quot;&gt;Ver trailer&lt;/string&gt;&#10;    &lt;string name=&quot;watch_trailer_2&quot;&gt;Trailer personal&lt;/string&gt;&#10;    &lt;string name=&quot;rent_1&quot;&gt;Alquilar por $3.99&lt;/string&gt;&#10;    &lt;string name=&quot;rent_2&quot;&gt;Alquilar por $1.99&lt;/string&gt;&#10;    &lt;string name=&quot;buy_1&quot;&gt;Comprar $9.99&lt;/string&gt;&#10;    &lt;string name=&quot;buy_2&quot;&gt;Comprar $14.99&lt;/string&gt;&#10;    &lt;string name=&quot;movie&quot;&gt;Película&lt;/string&gt;&#10;    &lt;string name=&quot;should_start&quot;&gt;¿Debería empezar?&lt;/string&gt;&#10;    &lt;string name=&quot;ndi_source_not_found&quot;&gt;Fuente NDI no encontrada&lt;/string&gt;&#10;    &lt;string name=&quot;connecting_to_ndi&quot;&gt;Conectando a fuente NDI...&lt;/string&gt;&#10;    &lt;string name=&quot;ndi_connection_failed&quot;&gt;Error al conectar con NDI&lt;/string&gt;&#10;    &lt;string name=&quot;searching_ndi_sources&quot;&gt;Buscando fuentes NDI...&lt;/string&gt;&#10;    &lt;string name=&quot;no_ndi_sources&quot;&gt;No se encontraron fuentes NDI&lt;/string&gt;&#10;    &lt;string name=&quot;refresh&quot;&gt;Actualizar&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Theme.Leanback&quot; parent=&quot;@style/Theme.Leanback.Browse&quot;&gt;&#10;        &lt;item name=&quot;android:colorPrimary&quot;&gt;@color/primary_color&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorPrimaryDark&quot;&gt;@color/primary_dark_color&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorAccent&quot;&gt;@color/accent_color&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &#10;    &lt;style name=&quot;Theme.Leanback.Browse&quot; parent=&quot;Theme.Leanback&quot;&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/background_color&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &#10;    &lt;style name=&quot;Theme.Leanback.Details&quot; parent=&quot;Theme.Leanback&quot;&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/background_color&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;&#10;# Force Java 11 for Android Gradle Plugin 8.2.0 compatibility&#10;org.gradle.java.home=C:\\Program Files\\Android\\Android Studio\\jbr&#10;&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;&#10;# Enable Gradle configuration cache for faster builds&#10;org.gradle.configuration-cache=true&#10;&#10;# Enable Gradle build cache&#10;org.gradle.caching=true" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.2.0&quot;&#10;&#10;[libraries]&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>